"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
(function () {
  var PROMO_END_DATE = new Date('2024-05-18T22:30:00.000Z');
  var apiURL = 'https://fav-prom.com/api_guessfight_hr';
  var resultsTable = document.querySelector('.tableResults__body'),
    unauthMsgs = document.querySelectorAll('.unauth-msg'),
    youAreInBtns = document.querySelectorAll('.took-part'),
    predictionBtn = document.querySelector('.predictBtn'),
    itemsTeams = document.querySelectorAll('.forecast__list button');
  var hrLeng = document.querySelector('#hrLeng');
  var locale = sessionStorage.getItem('locale') || 'en';
  function setState(newLocale) {
    locale = newLocale;
    sessionStorage.setItem('locale', locale);
  }
  function toggleState() {
    var newLocale = locale === 'en' ? 'hr' : 'en';
    setState(newLocale);
    window.location.reload();
  }
  document.querySelector('.en-btn').addEventListener('click', function () {
    toggleState();
  });
  if (hrLeng) locale = 'hr';
  document.querySelector(".fav__page").classList.add(locale);
  var i18nData = {};
  var userId = Number(sessionStorage.getItem('id')) || null;
  console.log(userId);
  // userId = 10101010;

  document.querySelector(".betTrue").addEventListener("click", function () {
    sessionStorage.setItem('id', 1481239);
    window.location.reload();
  });
  document.querySelector(".betFalse").addEventListener("click", function () {
    sessionStorage.setItem('id', 1481187);
    window.location.reload();
  });
  document.querySelector(".unAuth").addEventListener("click", function () {
    sessionStorage.removeItem('id');
    window.location.reload();
  });
  document.querySelector(".menu-btn").addEventListener("click", function () {
    document.querySelector(".menu-btns").classList.toggle("hide");
  });
  var scorePrediction = {
    team: 1
  };
  var teamNamesById = [];
  function loadTranslations() {
    return fetch("".concat(apiURL, "/translates/").concat(locale)).then(function (res) {
      return res.json();
    }).then(function (json) {
      i18nData = json;
      translate();
      var mutationObserver = new MutationObserver(function (mutations) {
        translate();
      });
      mutationObserver.observe(document.getElementById('predictor'), {
        childList: true,
        subtree: true
      });
    });
  }
  function translate() {
    var elems = document.querySelectorAll('[data-translate]');
    if (elems && elems.length) {
      elems.forEach(function (elem) {
        var key = elem.getAttribute('data-translate');
        elem.innerHTML = translateKey(key);
        elem.removeAttribute('data-translate');
      });
    }
    if (locale === 'en') {
      mainPage.classList.add('en');
    }
    refreshLocalizedClass();
  }
  function translateKey(key) {
    if (!key) {
      return;
    }
    return i18nData[key] || '*----NEED TO BE TRANSLATED----*   key:  ' + key;
  }
  function refreshLocalizedClass(element, baseCssClass) {
    if (!element) {
      return;
    }
    for (var _i = 0, _arr = ['hr']; _i < _arr.length; _i++) {
      var lang = _arr[_i];
      element.classList.remove(baseCssClass + lang);
    }
    element.classList.add(baseCssClass + locale);
  }
  var request = function request(link, extraOptions) {
    return fetch(apiURL + link, _objectSpread({
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    }, extraOptions || {})).then(function (res) {
      return res.json();
    });
  };
  function getUsers() {
    return request('/users');
  }
  var InitPage = function InitPage() {
    getUsers().then(function (users) {
      renderUsers(users);
      translate();
    });
  };
  function init() {
    initDrop();
    initPredictionBtn();
    if (window.store) {
      var state = window.store.getState();
      userId = state.auth.isAuthorized && state.auth.id || '';
      InitPage();
    } else {
      InitPage();
      var c = 0;
      var i = setInterval(function () {
        if (c < 50) {
          if (!!window.g_user_id) {
            userId = window.g_user_id;
            InitPage();
            checkUserAuth();
            clearInterval(i);
          }
        } else {
          clearInterval(i);
        }
      }, 200);
    }
    checkUserAuth();
  }
  function renderUsers(users) {
    populateUsersTable(users, userId, resultsTable);
  }
  function populateUsersTable(users, currentUserId, table) {
    table.innerHTML = '';
    console.log(users);
    if (users && users.length) {
      var currentUser = userId && users.find(function (user) {
        return user.userid === currentUserId;
      });
      if (currentUser) {
        displayUser(currentUser, true, table);
      }
      users.forEach(function (user) {
        if (user.userid !== currentUserId) {
          displayUser(user, false, table);
        }
      });
    }
  }
  function displayUser(user, isCurrentUser, table) {
    var additionalUserRow = document.createElement('div');
    additionalUserRow.classList.add('tableResults__row');
    var selectedTeam = user.team && user.team > 0 ? teamNamesById[user.team] : '';
    if (isCurrentUser) {
      updateLastPrediction(selectedTeam);
      refreshDrop(user.team);
      additionalUserRow.classList.add('_yourPlace');
    }
    additionalUserRow.innerHTML = "\n                        <div class=\"tableResults__body-col\">".concat(isCurrentUser ? user.userid : maskUserId(user.userid), "</div>\n                        <div class=\"tableResults__body-col\">").concat(formatDateString(user.lastForecast), "</div>\n                        <div class=\"tableResults__body-col\">").concat(selectedTeam, "</div>\n                        <div class=\"tableResults__body-col\">************</div>\n                    ");
    table.append(additionalUserRow);
  }
  function updateLastPrediction(team) {
    var forecastLogDiv = document.querySelector('.forecast__des');
    if (team) {
      forecastLogDiv.classList.remove('hide');
      var lastPredictionLabel = document.getElementById('roundWinner');
      lastPredictionLabel.innerHTML = "".concat(team);
    } else {
      forecastLogDiv.classList.add('hide');
    }
  }
  function refreshDrop(predictedTeam) {
    var regex = /“([^“”]+)”/;
    scorePrediction.team = predictedTeam;
    itemsTeams.forEach(function (item) {
      item.classList.remove('active');
      var teamId = +item.dataset.teamId;
      if (predictedTeam === teamId) {
        item.classList.add('active');
      }
    });
  }
  function formatDateString(dateString) {
    var date = new Date(dateString);
    var day = date.getDate().toString().padStart(2, '0');
    var month = (date.getMonth() + 1).toString().padStart(2, '0');
    var year = date.getFullYear();
    var hours = date.getHours().toString().padStart(2, '0');
    var minutes = date.getMinutes().toString().padStart(2, '0');
    return "".concat(day, ".").concat(month, ".").concat(year, " / ").concat(hours, ":").concat(minutes);
  }
  function maskUserId(userId) {
    return "**" + userId.toString().slice(2);
  }

  // let checkUserAuth = () => {
  //     if (userId) {
  //         unauthMsgs.forEach(item => item.classList.add('hide'));
  //         youAreInBtns.forEach(item => item.classList.remove('hide'));
  //     }
  // }

  function checkUserAuth() {
    return request("/favuser/".concat(userId, "?nocache=1")).then(function (res) {
      if (res.userid) {
        console.log(userId === res.userid);
        if (res.userid == userId) {
          confirmBet(res.betConfirmed);
        }
        unauthMsgs.forEach(function (item) {
          return item.classList.add('hide');
        });
        youAreInBtns.forEach(function (item) {
          return item.classList.remove('hide');
        });
      } else {
        unauthMsgs.forEach(function (item) {
          return item.classList.remove('hide');
        });
        youAreInBtns.forEach(function (item) {
          return item.classList.add('hide');
        });
      }
    });
  }

  //custom drop
  function initDrop() {
    var regex = /“([^“”]+)”/;
    itemsTeams.forEach(function (item) {
      var teamId = +item.dataset.teamId;
      teamNamesById[teamId] = item.innerHTML;
      item.addEventListener('click', function () {
        itemsTeams.forEach(function (el) {
          el.classList.remove('active');
        });
        scorePrediction.team = teamId;
        item.classList.add('active');
      });
    });
  }
  var isRequestInProgress;
  function initPredictionBtn() {
    document.addEventListener('click', function (e) {
      if (!!e.target.closest('.predictBtn')) {
        if (isRequestInProgress) {
          return;
        }
        setTimeout(function () {
          youAreInBtns.forEach(function (item) {
            return item.classList.remove('showBtn');
          });
        }, 5000);
        youAreInBtns.forEach(function (item) {
          return item.classList.add('showBtn');
        });
        isRequestInProgress = true;
        predictionBtn.classList.add("pointer-none");
        request('/bet', {
          method: 'POST',
          body: JSON.stringify({
            userid: userId,
            team: scorePrediction.team
          })
        }).then(function (res) {
          isRequestInProgress = false;
          predictionBtn.classList.remove("pointer-none");
          InitPage();
        })["catch"](function (e) {
          isRequestInProgress = false;
          predictionBtn.classList.remove("pointer-none");
        });
      }
    });
  }
  loadTranslations().then(init);
  function confirmBet(bet) {
    var betWrap = document.querySelector(".forecast__question");
    var betTrue = document.querySelector(".forecast__question-item-green");
    var betFalse = document.querySelector(".forecast__question-item-orange");
    betWrap.classList.remove("hide");
    betTrue.classList.remove("active");
    betFalse.classList.remove("active");
    // console.log(betWrap)

    if (bet) {
      betTrue.classList.add("active");
    } else {
      betFalse.classList.add("active");
    }
  }
  var mainPage = document.querySelector('.fav__page');
  setTimeout(function () {
    return mainPage.classList.add('overflow');
  }, 1000);
  var currentDate = new Date();
  if (currentDate >= PROMO_END_DATE) {
    predictionBtn.classList.add('blockBtn');
  }
  var blackBtn = document.querySelector(".black-btn");
  blackBtn.addEventListener("click", function () {
    document.body.classList.toggle("dark");
  });
})();
"use strict";
//# sourceMappingURL=data:application/json;charset=utf8;base64,
